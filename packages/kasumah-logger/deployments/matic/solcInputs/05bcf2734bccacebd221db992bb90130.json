{
  "language": "Solidity",
  "sources": {
    "contracts/Kasumah721OwnerConfigs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/utils/Arrays.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n// import \"hardhat/console.sol\";\n\n/**\n    @dev KasumahOwnerConfigs is a contract that lets the current owner of an 1155\n    set arbitrary key/value pairs for the asset. Warning here that for *fungible*\n    1155 tokens, *any* owner will be able to set the k/v pairs.\n */\ncontract Kasumah721OwnerConfigs is Context {\n    using Arrays for uint256[];\n\n    mapping(bytes32 => uint256[]) private _keys; // hash of address/id/key -> snapshot\n\n    mapping(bytes32 => mapping(uint256 => bytes)) private _values;\n\n    function set(\n        address erc721Contract,\n        uint256 tokenID,\n        string calldata key,\n        bytes calldata value\n    ) public {\n        requireUserOwnerAndNFT(erc721Contract, tokenID);\n        bytes32 hsh = hashKey(erc721Contract, tokenID, key);\n        uint256 blockNumber = block.number;\n        uint256[] storage snapshots = _keys[hsh];\n        require(\n            snapshots.length == 0 ||\n                snapshots[snapshots.length - 1] < blockNumber,\n            \"Key can only be set once per block\"\n        );\n        // console.log('pushing: ', blockNumber);\n        snapshots.push(blockNumber);\n        _values[hsh][blockNumber] = value;\n    }\n\n    function latest(\n        address erc721Contract,\n        uint256 tokenID,\n        string calldata key\n    ) public view returns (bytes memory value) {\n        return valueAt(erc721Contract, tokenID, key, block.number);\n    }\n\n    function valueAt(\n        address erc721Contract,\n        uint256 tokenID,\n        string calldata key,\n        uint256 blockNumber\n    ) public view returns (bytes memory value) {\n        bytes32 hsh = hashKey(erc721Contract, tokenID, key);\n        uint256 closest = _keys[hsh].findUpperBound(blockNumber);\n        uint256[] storage snapshots = _keys[hsh];\n        // console.log('bn, close', blockNumber, closest);\n        if (closest == 0) {\n            return _values[hsh][snapshots[0]];\n        }\n        if (closest == snapshots.length) {\n            return _values[hsh][snapshots[closest - 1]];\n        }\n        uint256 snapID = snapshots[closest];\n        if (snapID > blockNumber) {\n            return _values[hsh][snapshots[closest - 1]];\n        }\n        return _values[hsh][snapID];\n    }\n\n    function snapshotSlice(\n        address erc721Contract,\n        uint256 tokenID,\n        string calldata key,\n        uint256 start,\n        uint256 length\n    ) public view returns (uint256[] memory blockNumbers) {\n        uint256[] storage snapshots = _keys[\n            hashKey(erc721Contract, tokenID, key)\n        ];\n        for (uint256 i = 0; i < length; i++) {\n            blockNumbers[i] = snapshots[i + start];\n        }\n        return blockNumbers;\n    }\n\n    function requireUserOwnerAndNFT(address erc721Contract, uint256 tokenID)\n        internal\n        view\n    {\n        require(\n            IERC721(erc721Contract).ownerOf(tokenID) == _msgSender(),\n            \"Kasumah721OwnerConfigs#Ony an owner may set configs\"\n        );\n    }\n\n    function hashKey(\n        address erc721Contract,\n        uint256 tokenID,\n        string calldata key\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(erc721Contract, tokenID, key));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n   /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "contracts/KasumahOwnerConfigs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/utils/Arrays.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\n// import \"hardhat/console.sol\";\n\n/**\n    @dev KasumahOwnerConfigs is a contract that lets the current owner of an 1155\n    set arbitrary key/value pairs for the asset. Warning here that for *fungible*\n    1155 tokens, *any* owner will be able to set the k/v pairs.\n */\ncontract KasumahOwnerConfigs is Context {\n    using Arrays for uint256[];\n\n    mapping(bytes32 => uint256[]) private _keys; // hash of address/id/key -> snapshot\n\n    mapping(bytes32 => mapping(uint256 => bytes)) private _values;\n\n    function set(\n        address erc1155Contract,\n        uint256 tokenID,\n        string calldata key,\n        bytes calldata value\n    ) public {\n        requireUserOwnerAndNFT(erc1155Contract, tokenID);\n        bytes32 hsh = hashKey(erc1155Contract, tokenID, key);\n        uint256 blockNumber = block.number;\n        uint256[] storage snapshots = _keys[hsh];\n        require(\n            snapshots.length == 0 ||\n                snapshots[snapshots.length - 1] < blockNumber,\n            \"Key can only be set once per block\"\n        );\n        // console.log('pushing: ', blockNumber);\n        snapshots.push(blockNumber);\n        _values[hsh][blockNumber] = value;\n    }\n\n    function latest(\n        address erc1155Contract,\n        uint256 tokenID,\n        string calldata key\n    ) public view returns (bytes memory value) {\n        return valueAt(erc1155Contract, tokenID, key, block.number);\n    }\n\n    function valueAt(\n        address erc1155Contract,\n        uint256 tokenID,\n        string calldata key,\n        uint256 blockNumber\n    ) public view returns (bytes memory value) {\n        bytes32 hsh = hashKey(erc1155Contract, tokenID, key);\n        uint256 closest = _keys[hsh].findUpperBound(blockNumber);\n        uint256[] storage snapshots = _keys[hsh];\n        // console.log('bn, close', blockNumber, closest);\n        if (closest == 0) {\n            return _values[hsh][snapshots[0]];\n        }\n        if (closest == snapshots.length) {\n            return _values[hsh][snapshots[closest - 1]];\n        }\n        uint256 snapID = snapshots[closest];\n        if (snapID > blockNumber) {\n            return _values[hsh][snapshots[closest - 1]];\n        }\n        return _values[hsh][snapID];\n    }\n\n    function snapshotSlice(\n        address erc1155Contract,\n        uint256 tokenID,\n        string calldata key,\n        uint256 start,\n        uint256 length\n    ) public view returns (uint256[] memory blockNumbers) {\n        uint256[] storage snapshots = _keys[\n            hashKey(erc1155Contract, tokenID, key)\n        ];\n        for (uint256 i = 0; i < length; i++) {\n            blockNumbers[i] = snapshots[i + start];\n        }\n        return blockNumbers;\n    }\n\n    function requireUserOwnerAndNFT(address erc1155Contract, uint256 tokenID)\n        internal\n        view\n    {\n        IERC1155 ownedContract = IERC1155(erc1155Contract);\n        require(\n            ownedContract.balanceOf(_msgSender(), tokenID) >= 1,\n            \"KasumahOwnerConfigs#Ony an owner may set configs\"\n        );\n    }\n\n    function hashKey(\n        address erc1155Contract,\n        uint256 tokenID,\n        string calldata key\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(erc1155Contract, tokenID, key));\n    }\n}\n"
    },
    "contracts/KasumahValueLogger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/utils/Arrays.sol\";\n// import \"hardhat/console.sol\";\n\ncontract KasumahValueLogger  {\n    using Arrays for uint256[];\n\n    mapping(address => mapping(address => bool)) private _approvals; // who is allowed to write for a user?\n\n    mapping(bytes32 => uint[]) private _keys; // hash of address/key -> snapshot\n\n    mapping(bytes32 => mapping(uint => bytes)) private _values;\n\n    function set(address user, string calldata key, bytes calldata value) public {\n        requireApprovedSender(user);\n        bytes32 hsh = hashKey(user, key);\n        uint blockNumber = block.number;\n        uint[] storage snapshots = _keys[hsh];\n        require(snapshots.length == 0 || snapshots[snapshots.length - 1] < blockNumber, \"Key can only be set once per block\");\n        // console.log('pushing: ', blockNumber);\n        snapshots.push(blockNumber);\n        _values[hsh][blockNumber] = value;\n    }\n\n    function latest(address user, string calldata key) public view returns (bytes memory value) {\n        return valueAt(user, key, block.number);\n    }\n\n    function valueAt(address user, string calldata key, uint blockNumber) public view returns (bytes memory value) {\n        bytes32 hsh = hashKey(user, key);\n        uint closest = _keys[hsh].findUpperBound(blockNumber);\n        uint[] storage snapshots = _keys[hsh];\n        // console.log('bn, close', blockNumber, closest);\n        if (closest == 0) {\n            return _values[hsh][snapshots[0]];\n        }\n        if (closest == snapshots.length) {\n            return _values[hsh][snapshots[closest - 1]];\n        }\n        uint snapID = snapshots[closest];\n        if (snapID > blockNumber) {\n            return _values[hsh][snapshots[closest - 1]];\n        }\n        return _values[hsh][snapID];\n    }\n\n    function snapshotSlice(address user, string calldata key, uint start, uint length) public view returns (uint256[] memory blockNumbers) {\n        uint[] storage snapshots = _keys[hashKey(user, key)];\n        for (uint i = 0; i < length; i++) {\n            blockNumbers[i] = snapshots[i + start];\n        }\n        return blockNumbers;\n    }\n\n    function setApproved(address user, bool isApproved) public {\n        _approvals[msg.sender][user] = isApproved;\n    }\n\n    function requireApprovedSender(address user) internal view {\n        require(user == msg.sender || _approvals[user][msg.sender], \"must be the user or have an approval to log\");\n    }\n\n    function hashKey(address user, string calldata key) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(user, key));\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}