/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KasumahLoggerInterface extends ethers.utils.Interface {
  functions: {
    "approve(address)": FunctionFragment;
    "latest(address,string)": FunctionFragment;
    "set(address,string,bytes)": FunctionFragment;
    "snapshotSlice(address,string,uint256,uint256)": FunctionFragment;
    "valueAt(address,string,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "approve", values: [string]): string;
  encodeFunctionData(
    functionFragment: "latest",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "snapshotSlice",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valueAt",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "latest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "snapshotSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valueAt", data: BytesLike): Result;

  events: {};
}

export class KasumahLogger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KasumahLoggerInterface;

  functions: {
    approve(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latest(
      user: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    set(
      user: string,
      key: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snapshotSlice(
      user: string,
      key: string,
      start: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { blockNumbers: BigNumber[] }>;

    valueAt(
      user: string,
      key: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;
  };

  approve(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latest(user: string, key: string, overrides?: CallOverrides): Promise<string>;

  set(
    user: string,
    key: string,
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snapshotSlice(
    user: string,
    key: string,
    start: BigNumberish,
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  valueAt(
    user: string,
    key: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    approve(user: string, overrides?: CallOverrides): Promise<void>;

    latest(
      user: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    set(
      user: string,
      key: string,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    snapshotSlice(
      user: string,
      key: string,
      start: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    valueAt(
      user: string,
      key: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    approve(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latest(
      user: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      user: string,
      key: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snapshotSlice(
      user: string,
      key: string,
      start: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueAt(
      user: string,
      key: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latest(
      user: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      user: string,
      key: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snapshotSlice(
      user: string,
      key: string,
      start: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueAt(
      user: string,
      key: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
